// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Authority.proto
#ifndef GRPC_Authority_2eproto__INCLUDED
#define GRPC_Authority_2eproto__INCLUDED

#include "Authority.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Authority {

class AccountService final {
 public:
  static constexpr char const* service_full_name() {
    return "Authority.AccountService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 注册新账号
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::Authority::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    // 登录账号
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::Authority::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // 发送短信验证码
    virtual ::grpc::Status SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::Authority::SendSmsCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>> AsyncSendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>>(AsyncSendSmsCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>> PrepareAsyncSendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>>(PrepareAsyncSendSmsCodeRaw(context, request, cq));
    }
    // 验证短信验证码
    virtual ::grpc::Status VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::Authority::VerifySmsCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>> AsyncVerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>>(AsyncVerifySmsCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>> PrepareAsyncVerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>>(PrepareAsyncVerifySmsCodeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 注册新账号
      virtual void Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 登录账号
      virtual void Login(::grpc::ClientContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 发送短信验证码
      virtual void SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 验证短信验证码
      virtual void VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>* AsyncSendSmsCodeRaw(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::SendSmsCodeResponse>* PrepareAsyncSendSmsCodeRaw(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>* AsyncVerifySmsCodeRaw(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Authority::VerifySmsCodeResponse>* PrepareAsyncVerifySmsCodeRaw(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::Authority::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::Authority::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::Authority::SendSmsCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>> AsyncSendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>>(AsyncSendSmsCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>> PrepareAsyncSendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>>(PrepareAsyncSendSmsCodeRaw(context, request, cq));
    }
    ::grpc::Status VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::Authority::VerifySmsCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>> AsyncVerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>>(AsyncVerifySmsCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>> PrepareAsyncVerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>>(PrepareAsyncVerifySmsCodeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void SendSmsCode(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifySmsCode(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::Authority::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::Authority::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>* AsyncSendSmsCodeRaw(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::SendSmsCodeResponse>* PrepareAsyncSendSmsCodeRaw(::grpc::ClientContext* context, const ::Authority::SendSmsCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>* AsyncVerifySmsCodeRaw(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Authority::VerifySmsCodeResponse>* PrepareAsyncVerifySmsCodeRaw(::grpc::ClientContext* context, const ::Authority::VerifySmsCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSmsCode_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifySmsCode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 注册新账号
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response);
    // 登录账号
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response);
    // 发送短信验证码
    virtual ::grpc::Status SendSmsCode(::grpc::ServerContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response);
    // 验证短信验证码
    virtual ::grpc::Status VerifySmsCode(::grpc::ServerContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::Authority::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::Authority::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::Authority::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::Authority::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSmsCode(::grpc::ServerContext* context, ::Authority::SendSmsCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::Authority::SendSmsCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySmsCode(::grpc::ServerContext* context, ::Authority::VerifySmsCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::Authority::VerifySmsCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_SendSmsCode<WithAsyncMethod_VerifySmsCode<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Authority::RegisterRequest, ::Authority::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authority::RegisterRequest* request, ::Authority::RegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::Authority::RegisterRequest, ::Authority::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authority::RegisterRequest, ::Authority::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Authority::LoginRequest, ::Authority::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authority::LoginRequest* request, ::Authority::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::Authority::LoginRequest, ::Authority::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authority::LoginRequest, ::Authority::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Authority::SendSmsCodeRequest, ::Authority::SendSmsCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authority::SendSmsCodeRequest* request, ::Authority::SendSmsCodeResponse* response) { return this->SendSmsCode(context, request, response); }));}
    void SetMessageAllocatorFor_SendSmsCode(
        ::grpc::MessageAllocator< ::Authority::SendSmsCodeRequest, ::Authority::SendSmsCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authority::SendSmsCodeRequest, ::Authority::SendSmsCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSmsCode(
      ::grpc::CallbackServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::Authority::VerifySmsCodeRequest, ::Authority::VerifySmsCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Authority::VerifySmsCodeRequest* request, ::Authority::VerifySmsCodeResponse* response) { return this->VerifySmsCode(context, request, response); }));}
    void SetMessageAllocatorFor_VerifySmsCode(
        ::grpc::MessageAllocator< ::Authority::VerifySmsCodeRequest, ::Authority::VerifySmsCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Authority::VerifySmsCodeRequest, ::Authority::VerifySmsCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifySmsCode(
      ::grpc::CallbackServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Login<WithCallbackMethod_SendSmsCode<WithCallbackMethod_VerifySmsCode<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSmsCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySmsCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSmsCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendSmsCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifySmsCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifySmsCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authority::RegisterRequest, ::Authority::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authority::RegisterRequest, ::Authority::RegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::Authority::RegisterRequest* /*request*/, ::Authority::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authority::RegisterRequest,::Authority::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authority::LoginRequest, ::Authority::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authority::LoginRequest, ::Authority::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::Authority::LoginRequest* /*request*/, ::Authority::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authority::LoginRequest,::Authority::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSmsCode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authority::SendSmsCodeRequest, ::Authority::SendSmsCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authority::SendSmsCodeRequest, ::Authority::SendSmsCodeResponse>* streamer) {
                       return this->StreamedSendSmsCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendSmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSmsCode(::grpc::ServerContext* /*context*/, const ::Authority::SendSmsCodeRequest* /*request*/, ::Authority::SendSmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSmsCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authority::SendSmsCodeRequest,::Authority::SendSmsCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifySmsCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifySmsCode() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Authority::VerifySmsCodeRequest, ::Authority::VerifySmsCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Authority::VerifySmsCodeRequest, ::Authority::VerifySmsCodeResponse>* streamer) {
                       return this->StreamedVerifySmsCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifySmsCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifySmsCode(::grpc::ServerContext* /*context*/, const ::Authority::VerifySmsCodeRequest* /*request*/, ::Authority::VerifySmsCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifySmsCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Authority::VerifySmsCodeRequest,::Authority::VerifySmsCodeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_SendSmsCode<WithStreamedUnaryMethod_VerifySmsCode<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_SendSmsCode<WithStreamedUnaryMethod_VerifySmsCode<Service > > > > StreamedService;
};

}  // namespace Authority


#endif  // GRPC_Authority_2eproto__INCLUDED
